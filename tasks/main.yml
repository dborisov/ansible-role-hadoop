---
- name: Ensure rpm dependencies are installed
  ansible.builtin.yum:
    name: # For hadoop-functions.sh
      - procps-ng
      - ncurses

- name: Ensure {{ hadoop_group_name }} group exists
  ansible.builtin.group:
    name: "{{ hadoop_group_name }}"
    gid: "{{ hadoop_group_id | default(omit) }}"
    system: yes

- name: Ensure hadoop users exist
  ansible.builtin.user:
    name: "{{ item.name }}"
    uid: "{{ item.id | default(omit) }}"
    group: "{{ hadoop_group_name }}"
    home: "{{ item.home }}"
    createhome: no
    system: yes
  loop:
    - name: "{{ hadoop_hdfs_user_name }}"
      id: "{{ hadoop_hdfs_user_id | default(omit) }}"
      home: "{{ hadoop_hdfs_data_dir }}"
    - name: "{{ hadoop_yarn_user_name }}"
      id: "{{ hadoop_yarn_user_id | default(omit) }}"
      home: "{{ hadoop_yarn_data_dir }}"
    - name: "{{ hadoop_mapred_user_name }}"
      id: "{{ hadoop_mapred_user_id | default(omit) }}"
      home: "{{ hadoop_mapred_data_dir }}"

- name: Ensure required directories exist
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - path: "{{ hadoop_base_dir }}"
      owner: "root"
      group: "root"
      mode: "0755"
    - path: "{{ hadoop_log_dir }}"
      owner: "root"
      group: "{{ hadoop_group_name }}"
      mode: "0775"
    - path: "{{ hadoop_hdfs_data_dir }}"
      owner: "{{ hadoop_hdfs_user_name }}"
      group: "{{ hadoop_group_name }}"
      mode: "0750"
    - path: "{{ hadoop_mapred_data_dir }}"
      owner: "{{ hadoop_mapred_user_name }}"
      group: "{{ hadoop_group_name }}"
      mode: "0750"
    - path: "{{ hadoop_yarn_data_dir }}"
      owner: "{{ hadoop_yarn_user_name }}"
      group: "{{ hadoop_group_name }}"
      mode: "0750"

- name: Download Apache Hadoop {{ hadoop_version }} distro
  ansible.builtin.get_url:
    url: "{{ hadoop_distro_url }}"
    dest: "{{ hadoop_base_dir }}/{{ hadoop_distro_file }}"
    owner: "root"
    group: "root"
    mode: "0644"

- name: Unarchive Apache Hadoop {{ hadoop_version }} distro
  ansible.builtin.unarchive:
    src: "{{ hadoop_base_dir }}/{{ hadoop_distro_file }}"
    dest: "{{ hadoop_base_dir }}"
    remote_src: yes
    creates: "{{ hadoop_base_dir }}/hadoop-{{ hadoop_version }}"
    owner: "root"
    group: "root"

- name: Ensure required symlinks exist 
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
    owner: "root"
    group: "root"
  loop:
    - src: "{{ hadoop_base_dir }}/hadoop-{{ hadoop_version }}"
      dest: "{{ hadoop_home_dir }}"
    - src: "{{ hadoop_home_dir }}/etc/hadoop"
      dest: "{{ hadoop_conf_dir }}"

- name: Ensure configuration files are present
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ hadoop_conf_dir }}/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0664"
  loop:
    - hadoop-env.sh
    - core-site.xml
    - hdfs-site.xml
    - mapred-env.sh
    - mapred-site.xml
    - yarn-env.sh
    - yarn-site.xml

- name: Ensure systemd unit files are present
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/etc/systemd/system/{{ item }}"
    owner: "root"
    group: "root"
    mode: "0664"
  loop:
    - "{{ hadoop_hdfs_namenode_service_name }}"
    - "{{ hadoop_hdfs_secondarynamenode_service_name }}"
    - "{{ hadoop_hdfs_datanode_service_name }}"
    - "{{ hadoop_mapred_historyserver_service_name }}"
    - "{{ hadoop_yarn_resourcemanager_service_name }}"
    - "{{ hadoop_yarn_nodemanager_service_name }}"

- name: Ensure PATH variable contains {{ hadoop_home_dir }}/bin directory
  ansible.builtin.copy:
    dest: "/etc/profile.d/hadoop.sh"
    content: "export PATH=$PATH:{{ hadoop_home_dir }}/bin:{{ hadoop_home_dir }}/sbin"
    owner: "root"
    group: "root"
    mode: "0644"

- name: Ensure Hadoop Namenode is initialized
  ansible.builtin.command: "{{ hadoop_home_dir }}/bin/hdfs namenode -format"
  args:
    creates: "{{ hadoop_dfs_namenode_name_dir }}"
  become: yes
  become_user: "{{ hadoop_hdfs_user_name }}"
  when: hadoop_hdfs_namenode_service_state == 'started'

- name: Ensure the Hadoop HDFS services are in the correct state
  ansible.builtin.systemd:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    enabled: "{{ item.enabled | ternary('yes', 'no') }}"
  loop:
    - name: "{{ hadoop_hdfs_namenode_service_name }}"
      state: "{{ hadoop_hdfs_namenode_service_state }}" 
      enabled: "{{ hadoop_hdfs_namenode_service_enabled }}"
    - name: "{{ hadoop_hdfs_secondarynamenode_service_name }}"
      state: "{{ hadoop_hdfs_secondarynamenode_service_state }}" 
      enabled: "{{ hadoop_hdfs_secondarynamenode_service_enabled }}"
    - name: "{{ hadoop_hdfs_datanode_service_name }}"
      state: "{{ hadoop_hdfs_datanode_service_state }}" 
      enabled: "{{ hadoop_hdfs_datanode_service_enabled }}"

- name: Ensure required directories exist on HDFS
  ansible.builtin.shell: | 
    {{ hadoop_home_dir }}/bin/hdfs dfs -mkdir -p {{ item }}
    {{ hadoop_home_dir }}/bin/hdfs dfs -chown {{ hadoop_mapred_user_name }}:{{ hadoop_group_name }} {{ item }}
  become: yes
  become_user: "{{ hadoop_hdfs_user_name }}"
  changed_when: false
  when:
    - hadoop_hdfs_namenode_service_state == 'started'
    - hadoop_hdfs_datanode_service_state == 'started'
  loop:
    - "{{ hadoop_mapreduce_jobhistory_done_dir }}"
    - "{{ hadoop_mapreduce_jobhistory_intermediate_done_dir }}"

- name: Ensure the Hadoop YARN services are in the correct state
  ansible.builtin.systemd:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    enabled: "{{ item.enabled | ternary('yes', 'no') }}"
  loop:
    - name: "{{ hadoop_mapred_historyserver_service_name }}"
      state: "{{ hadoop_mapred_historyserver_service_state }}" 
      enabled: "{{ hadoop_mapred_historyserver_service_enabled }}"
    - name: "{{ hadoop_yarn_resourcemanager_service_name }}"
      state: "{{ hadoop_yarn_resourcemanager_service_state }}" 
      enabled: "{{ hadoop_yarn_resourcemanager_service_enabled }}"
    - name: "{{ hadoop_yarn_nodemanager_service_name }}"
      state: "{{ hadoop_yarn_nodemanager_service_state }}" 
      enabled: "{{ hadoop_yarn_nodemanager_service_enabled }}"